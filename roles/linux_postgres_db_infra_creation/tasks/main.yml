---
- name: create VPC
  ec2_vpc_net:
    name: "{{ vpc_name }}"
    cidr_block: "{{ vpc_cidr }}"
    region: "{{ region }}"
    state: present
  register: vpc

- name: associate subnet to the VPC
  ec2_vpc_subnet:
   state: present
   vpc_id: "{{ vpc.vpc.id }}"
   region: "{{ region }}"
   cidr: "{{ subnet_cidr }}"
   map_public: yes
   resource_tags:
     Name: "{{ subnet_name }}"
  register: subnet
 
- name: create IGW
  ec2_vpc_igw:
   vpc_id: "{{ vpc.vpc.id }}"
   region: "{{ region }}"
   state: "present"
   tags:
     Name: "{{ igw_name }}"
  register: igw
  
- name: Route IGW
  ec2_vpc_route_table:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ region }}"
    subnets:
      - "{{ subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id  }}"
    tags:
      Name: "{{ route_name }}"
 
# update the CIDR address in the SSH port section.
 
- name: Create Security Group
  ec2_group:
    name: Ansible-SG
    description: Ansible Security Group
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ region }}"
    rules:
      - proto: tcp
        ports:
        - 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        ports:
        - 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        ports:
        - 5432
        cidr_ip: 0.0.0.0/0
  register: security_group


- name: Create Postgres 
  ec2:
    key_name: "{{ keypair_name }}"
    image: ami-0b500ef59d8335eee
    wait: yes
    instance_type: t2.micro
    region: "{{ region }}"
    group_id: "{{ security_group.group_id }}"
    vpc_subnet_id: "{{ subnet.subnet.id }}"
    count_tag:
      Name: postgres
    instance_tags:
      Name: postgres
    exact_count: 2
  register: ec2

- debug:
    var: ec2

- debug: 
    var: ec2.instances[0]["public_ip"]

- debug:
    var: ec2.instances[0]["private_ip"]

- name: add postgres master to master group
  add_host: 
     name: "{{ ec2.instances[0]['public_ip'] }}"
     groups: Master
     ansible_ssh_private_key_file: "/root/linux-ansible/roles/linux_postgres_db_infra_creation/newkey.pem"
     ansible_user: ec2-user
     
- debug:
    var: ec2.instances[1]["public_ip"]

- debug:
    var: ec2.instances[1]["private_ip"]

- name: add postgres standby to standby  group
  add_host:
     name: "{{ ec2.instances[1]['public_ip'] }}"
     groups: Standby
     ansible_ssh_private_key_file: "/root/linux-ansible/roles/linux_postgres_db_infra_creation/newkey.pem"
     ansible_user: ec2-user
     
- set_fact:
    master: "{{ ec2.instances[0]['private_ip'] }}"
    standby: "{{ ec2.instances[1]['private_ip'] }}"

- debug:
    var: master

- debug:
    var: standby

- name: wait for the instances to boot by checking the ssh port
  wait_for: 
      host: "{{item['public_ip']}}"
      port: 22 
      delay: 60 
      timeout: 320 
      state: started
  with_items:  "{{ec2.instances}}"


